// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjektTabAPI.Data;

#nullable disable

namespace ProjektTabAPI.Migrations
{
    [DbContext(typeof(PolBankDbContext))]
    [Migration("20240701174053_AddVerificationCodeEntity")]
    partial class AddVerificationCodeEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProjektTabAPI.Entities.Domain.BankingAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Blocked")
                        .HasColumnType("bit");

                    b.Property<Guid>("Id_client")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id_client");

                    b.ToTable("BankingAccounts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a099766e-075e-4696-91ed-3fa39c745051"),
                            Amount = 100.00m,
                            Blocked = false,
                            Id_client = new Guid("a257e3d3-eea9-47ef-a8dc-1c8dbc7a6536"),
                            Number = "11111222223333344444555556"
                        },
                        new
                        {
                            Id = new Guid("e3df980b-f905-4595-b3ac-3ac2b1b7c4ca"),
                            Amount = 350.19m,
                            Blocked = false,
                            Id_client = new Guid("f1e1eb58-18a0-4617-a281-fb36e4a67cc2"),
                            Number = "22222333334444455555666667"
                        });
                });

            modelBuilder.Entity("ProjektTabAPI.Entities.Domain.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<bool>("Blocked")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfTries")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a257e3d3-eea9-47ef-a8dc-1c8dbc7a6536"),
                            Age = 23,
                            Blocked = false,
                            Email = "lukasz@wp.pl",
                            Login = "lukasz",
                            Name = "Lukasz",
                            NumberOfTries = 0,
                            Password = "lukasz",
                            Phone = "111222333",
                            Surname = "Jarzab"
                        },
                        new
                        {
                            Id = new Guid("f1e1eb58-18a0-4617-a281-fb36e4a67cc2"),
                            Age = 23,
                            Blocked = false,
                            Email = "jan@wp.pl",
                            Login = "jan",
                            Name = "Jan",
                            NumberOfTries = 0,
                            Password = "jan",
                            Phone = "222333444",
                            Surname = "Samiec"
                        });
                });

            modelBuilder.Entity("ProjektTabAPI.Entities.Domain.Login", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Id_Client")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Successful")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("Id_Client");

                    b.ToTable("Logins");

                    b.HasData(
                        new
                        {
                            Id = new Guid("377c0de6-fefe-4169-b42f-3ffbc70c9965"),
                            DateTime = new DateTime(2024, 7, 1, 19, 40, 52, 940, DateTimeKind.Local).AddTicks(7760),
                            Id_Client = new Guid("a257e3d3-eea9-47ef-a8dc-1c8dbc7a6536"),
                            Successful = true
                        });
                });

            modelBuilder.Entity("ProjektTabAPI.Entities.Domain.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Balance_before")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("Recipient_BAId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Sender_BAId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Recipient_BAId");

                    b.HasIndex("Sender_BAId");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("94a62f27-05c6-4308-b5cf-b23ef5a33ee8"),
                            Amount = 100.00m,
                            Balance_before = 200.00m,
                            Recipient_BAId = new Guid("e3df980b-f905-4595-b3ac-3ac2b1b7c4ca"),
                            Sender_BAId = new Guid("a099766e-075e-4696-91ed-3fa39c745051"),
                            Title = "Impreza urodzinowa"
                        });
                });

            modelBuilder.Entity("ProjektTabAPI.Entities.Domain.VerificationCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("VerificationCodes");
                });

            modelBuilder.Entity("ProjektTabAPI.Entities.Domain.BankingAccount", b =>
                {
                    b.HasOne("ProjektTabAPI.Entities.Domain.Client", "Client")
                        .WithMany("BankingAccounts")
                        .HasForeignKey("Id_client")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ProjektTabAPI.Entities.Domain.Login", b =>
                {
                    b.HasOne("ProjektTabAPI.Entities.Domain.Client", "Client")
                        .WithMany("Logins")
                        .HasForeignKey("Id_Client")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ProjektTabAPI.Entities.Domain.Transaction", b =>
                {
                    b.HasOne("ProjektTabAPI.Entities.Domain.BankingAccount", "Recipient")
                        .WithMany("T_Sent")
                        .HasForeignKey("Recipient_BAId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("ProjektTabAPI.Entities.Domain.BankingAccount", "Sender")
                        .WithMany("T_Received")
                        .HasForeignKey("Sender_BAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("ProjektTabAPI.Entities.Domain.BankingAccount", b =>
                {
                    b.Navigation("T_Received");

                    b.Navigation("T_Sent");
                });

            modelBuilder.Entity("ProjektTabAPI.Entities.Domain.Client", b =>
                {
                    b.Navigation("BankingAccounts");

                    b.Navigation("Logins");
                });
#pragma warning restore 612, 618
        }
    }
}
